{"version":3,"sources":["../../../projects/fsms-angular-pubsub/src/lib/pubsub.service.ts","../../../projects/fsms-angular-pubsub/src/lib/pubsub.module.ts","../../../projects/fsms-angular-pubsub/src/lib/subscribe-options.ts","../../../projects/fsms-angular-pubsub/src/lib/message.ts"],"names":["PubSubService","this","map","Map","subscriptions","prototype","subscribe","_a","message","callback","error","complete","Error","messageType","type","hasSubject","setNewSubject","subject","getSubject","asObservable","subscription","addSubscription","publish","next","clearAllSubscriptions","forEach","s","unsubscribe","length","clear","sub","push","get","has","set","ReplaySubject","Injectable","PubSubModule","forRoot","ngModule","providers","NgModule"],"mappings":"yWAKA,iBACA,SAAAA,IAEUC,KAAAC,IAAM,IAAIC,IACVF,KAAAG,cAAgC,UAEjCJ,EAAAK,UAAAC,UAAA,SAAUC,OACfC,EAAOD,EAAAC,QACPC,EAAQF,EAAAE,SACRC,EAAKH,EAAAG,MACLC,EAAQJ,EAAAI,SAER,IAAKH,EACH,MAAM,IAAII,MACR,gEAIJ,IAAMC,EAAcL,EAAQM,KAEvBb,KAAKc,WAAWF,IACnBZ,KAAKe,cAAcH,GAGrB,IAAII,EAAUhB,KAAKiB,WAAWL,GAE9B,GAAwB,mBAAbJ,EACT,OAAOQ,EAAQE,eAEf,IAAMC,EAAeH,EAClBE,eACAb,UAAUG,EAAUC,EAAOC,GAI9B,OAFAV,KAAKoB,gBAAgBD,GAEdA,GAIJpB,EAAAK,UAAAiB,QAAA,SAAQd,GACb,IAAKA,EACH,MAAM,IAAII,MACR,2DAEQX,KAAKc,WAAWP,EAAQM,OAIpCb,KAAKiB,WAAWV,EAAQM,MAAMS,KAAKf,IAGrCR,EAAAK,UAAAmB,sBAAA,WACEvB,KAAKG,cAAcqB,SAAQ,SAACC,GAAM,OAAAA,GAAKA,EAAEC,iBACzC1B,KAAKG,cAAcwB,OAAS,EAC5B3B,KAAKC,IAAI2B,SAGH7B,EAAAK,UAAAgB,gBAAA,SAAgBS,GACtB7B,KAAKG,cAAc2B,KAAKD,IAGlB9B,EAAAK,UAAAa,WAAA,SAAWL,GACjB,OAAOZ,KAAKC,IAAI8B,IAAInB,IAGdb,EAAAK,UAAAU,WAAA,SAAWF,GACjB,OAAOZ,KAAKC,IAAI+B,IAAIpB,IAGdb,EAAAK,UAAAW,cAAA,SAAcH,GACpBZ,KAAKC,IAAIgC,IAAIrB,EAAa,IAAIsB,EAAAA,yCArEjCC,EAAAA,8BCDD,SAAAC,YACgBA,EAAAC,QAAP,WACL,MAAO,CACLC,SAAUF,EACVG,UAAW,CACTxC,8BANPyC,EAAAA,iBCFD,eCFA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ReplaySubject, Subscription } from 'rxjs';\r\nimport { Message } from './message';\r\nimport { SubscribeOptions } from './subscribe-options';\r\n\r\nconst ServiceName: string = 'PubSub Service';\r\n@Injectable()\r\nexport class PubSubService {\r\n  private map = new Map();\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  public subscribe({\r\n    message,\r\n    callback,\r\n    error,\r\n    complete,\r\n  }: SubscribeOptions): Subscription {\r\n    if (!message) {\r\n      throw new Error(\r\n        `[${ServiceName}] => Subscription method must get event name.`\r\n      );\r\n    }\r\n\r\n    const messageType = message.type;\r\n\r\n    if (!this.hasSubject(messageType)) {\r\n      this.setNewSubject(messageType);\r\n    }\r\n\r\n    let subject = this.getSubject(messageType);\r\n\r\n    if (typeof callback !== 'function') {\r\n      return subject.asObservable();\r\n    } else {\r\n      const subscription = subject\r\n        .asObservable()\r\n        .subscribe(callback, error, complete);\r\n\r\n      this.addSubscription(subscription);\r\n\r\n      return subscription;\r\n    }\r\n  }\r\n\r\n  public publish(message: Message) {\r\n    if (!message) {\r\n      throw new Error(\r\n        `[${ServiceName}] => Publish method must get event name.`\r\n      );\r\n    } else if (!this.hasSubject(message.type)) {\r\n      return;\r\n    }\r\n\r\n    this.getSubject(message.type).next(message);\r\n  }\r\n\r\n  clearAllSubscriptions() {\r\n    this.subscriptions.forEach((s) => s && s.unsubscribe());\r\n    this.subscriptions.length = 0;\r\n    this.map.clear();\r\n  }\r\n\r\n  private addSubscription(sub: Subscription) {\r\n    this.subscriptions.push(sub);\r\n  }\r\n\r\n  private getSubject(messageType: string) {\r\n    return this.map.get(messageType);\r\n  }\r\n\r\n  private hasSubject(messageType: string) {\r\n    return this.map.has(messageType);\r\n  }\r\n\r\n  private setNewSubject(messageType: string) {\r\n    this.map.set(messageType, new ReplaySubject<any>());\r\n  }\r\n}\r\n","\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PubSubService } from './pubsub.service';\r\n\r\n@NgModule()\r\nexport class PubSubModule {\r\n  public static forRoot(): ModuleWithProviders<PubSubModule> {\r\n    return {\r\n      ngModule: PubSubModule,\r\n      providers: [\r\n        PubSubService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Message } from './message';\r\n\r\nexport class SubscribeOptions {\r\n  message: Message;\r\n  callback?: (value: any) => void;\r\n  error?: (error: any) => void;\r\n  complete?: () => void;\r\n}\r\n","export class Message {\r\n  type: string;\r\n}\r\n"]}