{"version":3,"file":"fsms-angular-pubsub.umd.js","sources":["../../../projects/fsms-angular-pubsub/src/lib/pubsub.service.ts","../../../projects/fsms-angular-pubsub/src/lib/pubsub.module.ts","../../../projects/fsms-angular-pubsub/src/lib/subscribe-options.ts","../../../projects/fsms-angular-pubsub/src/lib/message.ts","../../../projects/fsms-angular-pubsub/src/public-api.ts","../../../projects/fsms-angular-pubsub/src/fsms-angular-pubsub.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ReplaySubject, Subscription } from 'rxjs';\r\nimport { Message } from './message';\r\nimport { SubscribeOptions } from './subscribe-options';\r\n\r\nconst ServiceName: string = 'PubSub Service';\r\n@Injectable()\r\nexport class PubSubService {\r\n  private map = new Map();\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  public subscribe({\r\n    message,\r\n    callback,\r\n    error,\r\n    complete,\r\n  }: SubscribeOptions): Subscription {\r\n    if (!message) {\r\n      throw new Error(\r\n        `[${ServiceName}] => Subscription method must get event name.`\r\n      );\r\n    }\r\n\r\n    const messageType = message.type;\r\n\r\n    if (!this.hasSubject(messageType)) {\r\n      this.setNewSubject(messageType);\r\n    }\r\n\r\n    let subject = this.getSubject(messageType);\r\n\r\n    if (typeof callback !== 'function') {\r\n      return subject.asObservable();\r\n    } else {\r\n      const subscription = subject\r\n        .asObservable()\r\n        .subscribe(callback, error, complete);\r\n\r\n      this.addSubscription(subscription);\r\n\r\n      return subscription;\r\n    }\r\n  }\r\n\r\n  public publish(message: Message) {\r\n    if (!message) {\r\n      throw new Error(\r\n        `[${ServiceName}] => Publish method must get event name.`\r\n      );\r\n    } else if (!this.hasSubject(message.type)) {\r\n      return;\r\n    }\r\n\r\n    this.getSubject(message.type).next(message);\r\n  }\r\n\r\n  clearAllSubscriptions() {\r\n    this.subscriptions.forEach((s) => s && s.unsubscribe());\r\n    this.subscriptions.length = 0;\r\n    this.map.clear();\r\n  }\r\n\r\n  private addSubscription(sub: Subscription) {\r\n    this.subscriptions.push(sub);\r\n  }\r\n\r\n  private getSubject(messageType: string) {\r\n    return this.map.get(messageType);\r\n  }\r\n\r\n  private hasSubject(messageType: string) {\r\n    return this.map.has(messageType);\r\n  }\r\n\r\n  private setNewSubject(messageType: string) {\r\n    this.map.set(messageType, new ReplaySubject<any>());\r\n  }\r\n}\r\n","\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PubSubService } from './pubsub.service';\r\n\r\n@NgModule()\r\nexport class PubSubModule {\r\n  public static forRoot(): ModuleWithProviders<PubSubModule> {\r\n    return {\r\n      ngModule: PubSubModule,\r\n      providers: [\r\n        PubSubService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Message } from './message';\r\n\r\nexport class SubscribeOptions {\r\n  message: Message;\r\n  callback?: (value: any) => void;\r\n  error?: (error: any) => void;\r\n  complete?: () => void;\r\n}\r\n","export class Message {\r\n  type: string;\r\n}\r\n","/*\r\n * Public API Surface of fsms-angular-pubsub\r\n */\r\n\r\nexport * from './lib/pubsub.service';\r\nexport * from './lib/pubsub.module';\r\nexport * from './lib/subscribe-options';\r\nexport * from './lib/message';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["ReplaySubject","Injectable","NgModule"],"mappings":";;;;;;IAKA,IAAM,WAAW,GAAW,gBAAgB,CAAC;;QAC7C;YAEU,QAAG,GAAG,IAAI,GAAG,EAAE,CAAC;YAChB,kBAAa,GAAmB,EAAE,CAAC;SAoE5C;QAlEQ,iCAAS,GAAT,UAAU,EAKE;gBAJjB,OAAO,aAAA,EACP,QAAQ,cAAA,EACR,KAAK,WAAA,EACL,QAAQ,cAAA;YAER,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CACb,MAAI,WAAW,kDAA+C,CAC/D,CAAC;aACH;YAED,IAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC;YAEjC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBACjC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;aACjC;YAED,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAE3C,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAClC,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;aAC/B;iBAAM;gBACL,IAAM,YAAY,GAAG,OAAO;qBACzB,YAAY,EAAE;qBACd,SAAS,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAExC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;gBAEnC,OAAO,YAAY,CAAC;aACrB;SACF;QAEM,+BAAO,GAAP,UAAQ,OAAgB;YAC7B,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CACb,MAAI,WAAW,6CAA0C,CAC1D,CAAC;aACH;iBAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACzC,OAAO;aACR;YAED,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7C;QAED,6CAAqB,GAArB;YACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC,CAAC;YACxD,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;YAC9B,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;SAClB;QAEO,uCAAe,GAAf,UAAgB,GAAiB;YACvC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC9B;QAEO,kCAAU,GAAV,UAAW,WAAmB;YACpC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAClC;QAEO,kCAAU,GAAV,UAAW,WAAmB;YACpC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAClC;QAEO,qCAAa,GAAb,UAAc,WAAmB;YACvC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,IAAIA,kBAAa,EAAO,CAAC,CAAC;SACrD;;;;gBAtEFC,eAAU;;;;QCDX;;QACgB,oBAAO,GAAd;YACL,OAAO;gBACL,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE;oBACT,aAAa;iBACd;aACF,CAAC;SACH;;;;gBATFC,aAAQ;;;;QCFT;SAKC;+BAAA;KAAA;;;QCPD;SAEC;sBAAA;KAAA;;ICFD;;;;ICAA;;;;;;;;;;;;;;;;;"}