# Trigger CI automatically whenever main branch is changed
name: Angular Pubsub Azure CI Pipeline
pool:
  vmImage: "ubuntu-latest"

strategy:
  matrix:
    node_12_x:
      node_version: 12.x
    node_13_x:
      node_version: 13.x # 14 is not available

variables:
  AUTH_NPMTOKEN: $(NPM_TOKEN) # Mapping secret var
  AUTH_GHTOKEN: $(GH_TOKEN) # Mapping secret var
  IS_PULLREQUEST: $[eq(variables['Build.Reason'], 'PullRequest')]

trigger:
  - main

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)

  - task: Cache@2 # Cache Node packages on build agent
    displayName: "Cache npm Dependencies"
    inputs:
      key: "**/package-lock.json, !**/node_modules/**/package-lock.json, !**/.*/**/package-lock.json"
      path: "$(Build.SourcesDirectory)/node_modules"
      cacheHitVar: CacheRestored

  - task: Npm@1 # Install npm packages on your build agent
    displayName: "Npm CI"
    inputs:
      command: ci
      verbose: false
    condition: eq(variables['CacheRestored'],False)

  - script: npm run test:ci # Run unit tests
    enabled: true
    displayName: Test

  - task: PublishTestResults@2 # Publish test results
    displayName: Test Report
    enabled: true
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "./coverage/fsms-angular-pubsub/test-report.xml"
      mergeTestResults: true
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1 # Publish code coverage results
    enabled: true
    displayName: Code Coverage
    inputs:
      codeCoverageTool: "Cobertura"
      summaryFileLocation: "./coverage/fsms-angular-pubsub/cobertura-coverage.xml"
    condition: succeededOrFailed()

    # Package web apps -->
  - script: npm run build:ci # Build Angular Project
    displayName: Build
    enabled: true

  # Package and deliver your code -->
  # release git # export GIT_TERMINAL_PROMPT=1 You can enable the prompt by set the environment variable GIT_TERMINAL_PROMPT to 1 but during the build you can't enter the values and the build will hang.To fix the error, just add the username & password or the Personal Access Token (PAT) in the git push command:
  - script: |
      export GIT_TERMINAL_PROMPT=1
      git config --global user.email "roopkt@gmail.com"
      git config --global user.name "rupeshtiwari"
      git remote set-url origin https://$(AUTH_GHTOKEN):x-oauth-basic@github.com/FullStackMaster1/fsms-angular-pubsub.git
      npx standard-version --release-as patch
      git push --atomic origin main --follow-tags
    displayName: Git Release

  - script: npm run copyfiles
    displayName: Copy Files

  - bash: | # Grab the package version
      v=`node -p "const p = require('./package.json'); p.version;"`
      echo "##vso[task.setvariable variable=packageVersion]$v"
    displayName: Package Version

  - script: | # update build
      echo "##vso[build.updatebuildnumber]$(packageVersion).$(Build.BuildId)_$(Build.SourceBranchName)"
    enabled: true

  - script: | # Publish a module to a npm registry
      npm config set //registry.npmjs.org/:_authToken=$(AUTH_NPMTOKEN)
      npm config set scope "@fsms"
      # npm config list
      # npm --version
      npm publish --access public
    displayName: Publish NPM
    workingDirectory: "./dist/fsms-angular-pubsub"
    condition: |
      and(
        succeeded(),
        ne(variables['IS_PULLREQUEST'], 'true')
      )
